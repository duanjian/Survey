/**
 * angular-strap
 * @version v2.1.4 - 2014-11-26
 * @link http://mgcrea.github.io/angular-strap
 * @author Olivier Louvignes (olivier@mg-crea.com)
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"use strict"; angular.module("mgcrea.ngPlunkr", ["mgcrea.ngStrap.helpers.debounce"]).run(["$templateCache", "version", function (n, e) { var t = "1.3.1", r = '<!DOCTYPE html>\n<html ng-app="{{ moduleName }}">\n\n  <head>\n    <meta charset="utf-8" />\n    <title>AngularJS Plunker</title>\n    <script>document.write(\'<base href="\' + document.location + \'" />\');</script>\n    <link rel="stylesheet" href="style.css" />\n    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css">\n    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css">\n    <link rel="stylesheet" href="//mgcrea.github.io/angular-strap/styles/angular-motion.min.css">\n    <link rel="stylesheet" href="//mgcrea.github.io/angular-strap/styles/bootstrap-additions.min.css">\n    <link rel="stylesheet" href="//mgcrea.github.io/angular-strap/styles/libraries.min.css">\n    <link rel="stylesheet" href="//mgcrea.github.io/angular-strap/styles/main.min.css">\n    <script src="//code.angularjs.org/' + t + '/angular.min.js" data-semver="' + t + '"></script>\n    <script src="//code.angularjs.org/' + t + '/angular-animate.min.js" data-semver="' + t + '"></script>\n    <script src="//code.angularjs.org/' + t + '/angular-sanitize.min.js" data-semver="' + t + '"></script>\n    <script src="//mgcrea.github.io/angular-strap/dist/angular-strap.js" data-semver="' + e + '"></script>\n    <script src="//mgcrea.github.io/angular-strap/dist/angular-strap.tpl.js" data-semver="' + e + '"></script>\n    <script src="app.js"></script>\n    <script src="//mgcrea.github.io/angular-strap/scripts/docs.tpl.js" data-semver="' + e + '"></script>\n    <script src="//mgcrea.github.io/angular-strap/scripts/demo.tpl.js" data-semver="' + e + '"></script>\n  </head>\n\n  <body ng-controller="MainCtrl">\n\n{{ contentHtml }}\n  </body>\n\n</html>\n'; n.put("$plunkr-html", r); var a = "/* Put your css in here */\n\n{{ contentCss }}\n"; n.put("$plunkr-css", a); var l = "var app = angular.module('{{ moduleName }}', ['ngAnimate', 'ngSanitize', 'mgcrea.ngStrap']);\n\napp.controller('MainCtrl', function($scope) {\n});\n\n{{ contentJs }}\n"; n.put("$plunkr-js", l) }]).provider("$form", function () { this.$get = ["$window", function (n) { var e = angular.element(n.document.body), t = {}; return t.post = function (n, t) { var r = angular.element('<form style="display: none;" method="post" action="' + n + '" target="_blank"></form>'); angular.forEach(t, function (n, e) { var t = angular.element('<input type="hidden" name="' + e + '">'); t.attr("value", n), r.append(t) }), e.append(r), r[0].submit(), r.remove() }, t }] }).provider("$plunkr", function () { var n = this.defaults = { preload: !1, plunkrTitle: "AngularJS Example Plunkr", plunkrPrivate: !0, plunkrTags: ["angular"], moduleName: "plunker", templateHtml: "$plunkr-html", contentHtml: "    <p>Hello {{name}}!</p>\n", contentHtmlUrl: "", templateCss: "$plunkr-css", contentCss: "body {\n  padding: 40px !important;\n}\n", contentCssUrl: "", templateJs: "$plunkr-js", contentJs: "  $scope.name = 'World';\n", contentJsUrl: "" }; this.$get = ["$rootScope", "$compile", "$templateCache", "$q", "$http", "$form", function (e, t, r, a, l, s) { function i(t) { { var i = {}, o = angular.extend({}, n, t); i.$scope = o.scope && o.scope.$new() || e.$new() } i.$isReady = !1; var c = a.defer(); i.$promise = c.promise; var u = {}; return i.init = function () { u.description = o.plunkrTitle, angular.forEach(o.plunkrTags, function (n, e) { u["tags[" + e + "]"] = n }), u.private = o.plunkrPrivate, o.preload && i.load() }, i.load = function () { return c.resolve(a.all(["templateHtml", "contentHtmlUrl", "templateCss", "contentCssUrl", "templateJs", "contentJsUrl"].map(function (n) { var e = o[n + "Prefix"] ? o[n + "Prefix"] + o[n] : o[n]; return o[n] && a.when(r.get(e) || l.get(e)) })).then(function (n) { return n.map(function (n) { return angular.isString(n) ? n : angular.isArray(n) ? n[1] : angular.isObject(n) ? n.data : n }) }).then(function (n) { u["files[index.html]"] = n[0].replace(/{{ contentHtml }}/i, n[1] || o.contentHtml).replace(/{{ moduleName }}/i, o.moduleName), u["files[style.css]"] = n[2].replace(/{{ contentCss }}/i, n[3] || o.contentCss).replace(/{{ moduleName }}/i, o.moduleName), u["files[app.js]"] = n[4].replace(/{{ contentJs }}/i, n[5] || o.contentJs).replace(/{{ moduleName }}/i, o.moduleName), i.$isReady = !0 })), i.$promise }, i.open = function () { i.$isReady ? s.post("http://plnkr.co/edit/?p=preview", u) : i.load() }, i.init(), i } return i }] }).directive("ngPlunkr", ["$plunkr", "debounce", function (n, e) { return { restrict: "EAC", scope: !0, template: '<i class="fa fa-edit"></i><small>plunker</small>', compile: function (t, r) { return r.$set("title", "edit in plunker"), function (t, r, a) { function l() { o.$isReady ? o.open() : (a.$set("title", '<i class="fa fa-spinner fa-spin"></i>&nbsp;preparing plunker...'), o.load()) } function s() { t.$apply(function () { a.$set("title", '<i class="fa fa-check"></i>&nbsp;punker ready, click again!') }) } var i = { scope: t }; angular.forEach(["moduleName", "templateHtml", "templateJs", "templateCss", "contentHtmlUrl", "contentJsUrl", "contentCssUrl"], function (n) { angular.isDefined(a[n]) && (i[n] = a[n]) }); var o = n(i), c = a.title; o.$promise.then(e(s, 400)), r.on("click", l), t.$on("$destroy", function () { a.$set("title", c), r.off("click", l), o.destroy(), i = null, o = null }) } } } }]), angular.module("mgcrea.ngStrapDocs", ["mgcrea.ngStrap", "mgcrea.ngPlunkr", "ngRoute", "ngAnimate"]).constant("version", "v2.1.4").config(["$plunkrProvider", "version", function (n, e) { angular.extend(n.defaults, { plunkrTitle: "AngularStrap Example Plunkr", plunkrTags: ["angular", "angular-strap"], plunkrPrivate: !1, contentHtmlUrlPrefix: "https://rawgit.com/mgcrea/angular-strap/" + e + "/src/", contentJsUrlPrefix: "https://rawgit.com/mgcrea/angular-strap/" + e + "/src/" }) }]).config(["$routeProvider", "$locationProvider", "$sceProvider", function (n, e, t) { e.html5Mode(!1), t.enabled(!1) }]).controller("MainCtrl", ["$scope", "$rootScope", "$location", "$anchorScroll", "$plunkr", function (n, e, t, r, a) { n.$location = t, n.$scrollTo = function (n) { t.hash(n), r() }, e.$on("$routeChangeSuccess", function () { }), n.createPlunkr = function () { a() } }]).run(["$window", "$rootScope", "$location", "$anchorScroll", "version", function (n, e, t, r, a) { e.version = a, n.FastClick.attach(n.document.body); var l = angular.element(n.document.body), s = l; s.on("click", function (n) { var a = angular.element(n.target), l = a.attr("href"); l && "#" === l[0] && (l.length > 1 && "/" === l[1] || 1 === n.which && (n.preventDefault(), console.warn("$location.hash", l), t.hash(l.substr(1)), r(), e.$digest(), console.warn("in"))) }), setTimeout(function () { r() }, 0) }]).directive("code", function () { return { restrict: "E", terminal: !0 } }).directive("appendSource", ["$window", "$compile", "indent", function (n, e, t) { return { compile: function (e, r) { var a = { placement: "after" }; angular.forEach(["placement", "hlClass"], function (n) { angular.isDefined(r[n]) && (a[n] = r[n]) }); var l = angular.element('<div class="highlight" ng-non-bindable><pre><code class="html" style="margin:0"></code></pre></div>'), s = l.children("pre").children("code"), i = t(e.html()); s.text(i), a.hlClass && s.addClass(a.hlClass), e[a.placement](l), n.hljs.highlightBlock(s[0]) } } }]).directive("highlightBlock", ["$window", "indent", function (n, e) { return { compile: function (t) { return t.html(e(t.html())), function (e, t) { n.hljs.highlightBlock(t[0]) } } } }]).value("indent", function (n, e) { if (!n) return n; for (var t, r = n.split(/\r?\n/), a = "      ".substr(0, e || 0) ; r.length && r[0].match(/^\s*$/) ;) r.shift(); for (; r.length && r[r.length - 1].match(/^\s*$/) ;) r.pop(); var l = 999; for (t = 0; t < r.length; t++) { var s = r[0], i = s.match(/^\s*/)[0]; i !== s && i.length < l && (l = i.length) } for (t = 0; t < r.length; t++) r[t] = a + r[t].substring(l).replace(/=""/g, ""); return r.push(""), r.join("\n") });